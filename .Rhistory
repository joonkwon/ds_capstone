y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(x~y)
lm(y~x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x<-c(140,138,150,148,135)
y<- c(132,135,151,146,130)
t.test(x,y,var.equal = TRUE, paired = TRUE)
1100+c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(3,4,.5, lower.tail = TRUE)
pbinom(3,4,.5, lower.tail = FALSE)
pbinom(4,4,.5, lower.tail = FALSE)
ppois(10/1787,.01,lower.tail = TRUE)
ppois(10/1787,.01,lower.tail = FALSE)
ppois((10/1787-1/100)/0.01,0.01)
ppois(1000/1787-1, .01)
poisson.test(10,T=1787,r=1/100,alternative="l")
pooled.var = (1.5^2*8 + 1.8^2*8)/(9+9-2)
test_stat <- -3-1/sqrt(pooled.var/9)
pt(test_stat,8)
pt(test_stat,8) < .01
power.t.test(100,0.01, 0.04)
power.t.test(100,0.01, 0.04, alternative = "one.sided")
power.t.test(100,0.01, 0.04, alternative = "one.sided", type=one.sample)
power.t.test(100,0.01, 0.04, alternative = "one.sided", type="one.sample")
qt(0.95,99)
power.t.test(power=.9,delta=.01,sd=0.04,type="one.sample",alternative = "one.sided")
binom.test(3,4,p=0.5,alternative="g")
library(datasets)
library(UsingR)
data("father.son")
head(father.son)
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- geom_point()
g
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- g + geom_point()
g
g <- g + geom_point(alpha = 0.3)
g
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- g + geom_point(alpha = 0.3)
g
g <- g + geom_point(alpha = 0.5, fill="green")
g
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g1 <- g + geom_point(alpha = 0.5, fill="green")
g1
g1 <- NULL
g1 <- g + geom_point(alpha = 0.5, fill="green", size=2)
g1
g1 <- NULL
g1
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g1 <- g + geom_point(alpha = 0.5, fill="green", size=2)
g1
g1 <- g + geom_point(alpha = 0.4, fill="green", size=2)
g1
fit <- lm(sheight ~ fheight, father.son)
g1 + geom_abline(lm)
g1 + geom_smooth(method="lm")
fit
plot(father.son$sheight, fit$residuals)
plot(father.son$fheight, fit$residuals)
abline(h=0, col="red")
summary(fit)
var(resid(fit))
fit$coef
fit$coef[2]
fit$coef[2]^2
data("mtcars")
head(mtcars)
fit <- lm(mpg ~ hp, mtcars)
summary(fit)
summary(fit)$r.squard
summary(fit)$r.squared
plot(mtcars$hp, resid(fit))
abline(h=0, col="darkred")
fit
resid(fit)^2 /(nrow(mtcars)-2)
var(resid(fit)) /(nrow(mtcars)-2)
summary(fit)
var(fit$residuals)/(nrow(mtcars)-2)
fit
sum(resid(fit)^2)/(nrow(mtcars)-2)
summary(fit)$sigma
summary(fit)$sigma^2
summary(fit)$r.squared
nrow(mtcars)
fit <- lm(sheight ~ fheight, data=father.son)
summary(fit)
fit$coefficients
fit$coef
summary(fit)
summary(fit)$coefficients
summary(fit)$coefficients[2,1]
summary(fit)$coefficients[2,1]+c(-1,1)*qt(.975, 1076)*summary(fit)$coefficients[2,2]
confint(fit)
fit <- lm(sheight ~ I(fheight - mean(fheight)), data=father.son)
confint(fit)
fit <- lm(sheight ~ fheight, data=father.son)
predict(fit, newdata = data.frame(fheight=mean(father.son$fheight)), interval = "confidence")
predict(fit, newdata = data.frame(fheight=mean(father.son$fheight)), interval = "prediction")
head(mtcars)
fit <- lm(mpg ~ hp, mtcars)
summary(fit)
confint(fit)
fit <- lm(mpg ~ I(hp - mean(mtcars$hp)), mtcars)
confint(fit)
m <- mean(mtcars$hp)
predict(fit, newdata = data.frame(hp = m), interval = "confidence")
predict(fit, newdata = data.frame(hp = m), interval = "prediction")
fit <- lm(mpg ~ hp, mtcars)
predict(fit, newdata = data.frame(hp = m), interval = "confidence")
xval <- seq(min(mtcars$hp):max(mtcars$hp),length=100)
xval <- seq(min(mtcars$hp),max(mtcars$hp),length=100)
xval
predict(fit, newdata = data.frame(xval), interval = "confidence")
predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
conf <- predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
head(conf)
conf$interval <= "confidence"
conf$interval <- "confidence"
head(conf)
dim(conf)
conf <- predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
class(conf)
pred <- predict(fit, newdata = data.frame(hp=xval), interval = "prediction")
class(pred)
conf <- data.frame(conf)
head(conf)
conf$int <- "conf"
head(conf)
pred$int <- "pred"
pred <- predict(fit, newdata = data.frame(hp=xval), interval = "prediction")
pred <- data.frame(pred)
pred$int <- "pred"
df <- cbind(conf,pred)
head(df)
df <- rbind(conf,pred)
head(df)
conf$x <- xval
pred$x <- xval
df <- rbind(conf,pred)
head(df)
tail(df)
names(df)
names(df)[1]="y"
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwer, ymax=upr, fill = int, alpha = 0.2)
g
g <- g + geom_ribbon(aes(ymin =lwer, ymax=upr, fill = int, alpha = 0.2))
g
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g
dev.off()
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g
g <- g + geom_line()
g
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=4)
g
x
y
x <- mtcars$hp
y <- mtcars$mpg
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=4)
g
dev.off()
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g <- g + geom_line()
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=3)
g
library(MASS)
head(shuttle)
str(shuttle$wind)
relevel(wind, "tail", shuttle)
?relevel
relevel(suttle$wind, "tail")
relevel(shuttle$wind, "tail")
str(shuttle$wind)
head(shuttle)
head(shuttle$use)
fit <- glm(use ~ wind, family = binomial, shuttle)
summary(fit)
exp(-0.03181)
1/0.9686906
exp(0.03181)
str(shuttle)
fit = glm(relevel(use, "noauto") ~ wind, binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail") + magn, binomial, shuttle)
summary(fit)
exp(-3.201e-02)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail") + magn, binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "auto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
data("InsectSprays")
head(InsectSprays)
gg <- glm(count ~ spray, poisson, InsectSprays)
summary(gg)
gg2 <- glm(count ~ spray+offset(10), poisson, InsectSprays)
gg2 <- glm(count ~ spray+offset(1), poisson, InsectSprays)
set.seed(123)
dataMatrix = matrix(rnorm(400), nrow=40)
dataMatrix
dim(dataMatrix)
head(dataMatrix)
image(1:10,1:40,t(dataMatrix))
t(dataMatrix)
t(dataMatrix)[,40:1]
image(t(dataMatrix)[,40:1])
heatmap(dataMatrix)
#create a vector with mtcars's column names - "am"
x <- names(mtcars)
x <- x[! x == "am" & ! x == "mpg" ]
#tt <- data.frame()
#names(tt) <- c("formula", "coefficient", "P-Value")
for (i in 1:length(x)) {
fml <- NULL; y <-NULL ; fit_temp <- NULL
fml <- paste("mpg ~ am + ", x[i] )
fit_temp <- lm(fml, data=mtcars)
y <- c(fml,round(summary(fit_temp)$coefficients[2,1],2),
round(summary(fit_temp)$coefficients[2,4],2))
y <- as.character(y); print(y)
}
par(mfrow=c(1,3))
with(mtcars, plot(disp, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
#load mtcars data
data(mtcars)
mtcars$am = as.factor(mtcars$am)
levels(mtcars$am) = c("automatic", "manual")
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$vs = as.factor(mtcars$vs)
mtcars$gear = as.factor(mtcars$gear)
mtcars$carb = as.factor(mtcars$carb)
par(mfrow=c(1,3))
with(mtcars, plot(disp, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
plot(am,cyl)
with(mtcars,plot(am,cyl))
plot(cyl,mpg, type=p)
with(mtcars, plot(cyl,mpg, type=p))
with(mtcars, plot(cyl,mpg, type="p"))
dev.off()
with(mtcars, plot(wt, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am, pch=19))
legend("topright", col=c(3,4), legend=c("manaual", "automatic"), pch=19)
legend("topright", col=c(3,4), legend=c("manaual", "automatic"), pch=19)
plot(am, wt)
with(mtcars,plot(am, wt))
with(mtcars,plot(am, cyl))
plot(bestFit)
fitAll = lm(mpg ~ ., mtcars)
library(MASS)
bestFit = stepAIC(fitAll, direction="both")
plot(bestFit)
cooks.distance(bestFit)
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+am))
with(mtcars, plot(hp, mpg, col=3+am))
with(mtcars, plot(wt, mpg, col=3+am))
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+am))
with(mtcars, plot(hp, mpg, col=3+am))
with(mtcars, plot(wt, mpg, col=3+(am="automatic"))
)
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"))
)
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(am, wt))
plot(as.numeric(mtcars$cyl), mpg, col=3+(am=="automatic"), pch=19))
plot(as.numeric(mtcars$cyl), mpg, col=3+(am=="automatic"), pch=19)
plot(as.numeric(mtcars$cyl), mtscars$mpg, col=3+(mtcars$am=="automatic"), pch=19)
plot(as.numeric(mtcars$cyl), mtcars$mpg, col=3+(mtcars$am=="automatic"), pch=19)
plot(mtcars$am, as.numeric(mtcars$cyl))
plot(mtcars$am, mtcars$cyl)
boxplot(mtcars$am, mtcars$cyl)
boxplot(mtcars$am, as.numeric(mtcars$cyl))
plot(mtcars$am, as.numeric(mtcars$cyl))
#par(mfrow=c(1,3))
#with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
#with(mtcars, plot(am, wt))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
dev.off()
#par(mfrow=c(1,3))
#with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
#with(mtcars, plot(am, wt))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
plot(bestFit)
?paste
paste(c("ab", "cd", "ef"))
paste(c("ab", "cd", "ef"))
paste(c("ab", "cd", "ef"), sep="+")
paste(c("ab", "cd", "ef", "1", "2"), sep="+")
paste(c("ab", "cd", "ef", "1", "2"), collapse="+")
paste(c("ab", "cd", "ef", "1", "2"), collapse=" + ")
paste("ab", collapse=" + ")
paste("mpg", "ab", collapse = " ~ ")
paste(c("mpg", "ab"), collapse = " ~ ")
data("mtcars")
str(mtcars)
lm.fit = lm(mpg ~ disp + hp, data=mtcars)
lm.fit
summary(lm.fit)
summary(lm.fit)$call
sm = summary(lm.fit)
sm$fstatistic
names(sm)
sm$sigma
sm$cov.unscaled
sm$fstatistic
sm$terms
names(sm)
sm$r.squared
sm$df
sm$aliased
sm$residuals
sm$terms
names(sm)
sm
lm.fit
names(lm.fit)
lm.fit$model
lm.fit$coefficients
lm.fit$fitted.values
lm.fit$effects
lm.fit$xlevels
lm.fit$qr
class(lm.fit$qr)
lm.fit$qr
names(lm.fit)
lm.fit$df.residual
lm.fit$call
lm.fit$model
lm.fit$terms
anova(lm.fit)
names(anova(lm.fit))
anova(lm.fit)["Pr(>F)"]
summary(lm.fit)
resid(lm.fit)
glance(lm.fit)
sm$fstatistic
?pf
pf(43.09, 2, 29)
pf(43.09, 2, 29, lower.tail = FALSE)
fs = sm$fstatistic
pf(fs[1], fs[2], fs[3], lower.tail=FALSE)
lm.fit =lm(mpg ~ hp + vs, data=mtcars)
summary(lm.fit)
?outputText
library(shiny)
outputText
?outputText
summary(lm.fit)$call
summary(lm.fit)$call
names(lm.fit)
call(lm.fit)
lm.fit$call
data(mtcars)
head(mtcars)
lm.fit = lm(mpg ~ wt + hp, data=mtcars)
plot(lm.fit)
names(lm.fit)
summary(lm.fit)
sm=summary(lm.fit)
sm$fstatistic
?pf
sm$fstatistic[1]
sm$fstatistic[2]
sm$fstatistic[3]
lm.fit$coefficients
sm$coefficients
sm
lm.fit2 = lm(mpg ~ hp + wt + I(wt^2), data=mtcars)
summary(lm.fit2)
plot(lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit3 = lm(mpg ~ hp + I(hp^2) + wt + I(wt^2), data=mtcars)
plot(lm.fit3)
summary(lm.fit3)
summary(lm.fit)
library(tm)
getTransformations()
setwd("~/github/ds_capstone")
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(ggplot2)
docs = Corpus(DirSource("./final/en_US"))
docs[[1]]
summary(docs)
class(docs[[1]])
as.character(docs[[1]])[1:1000]
as.character(docs[[1]])[1:3]
inspect(docs[[1]])
summary(docs[[1]])
meta(docs[[1]])
docs = Corpus(DirSource("./final/en_US", encoding = 'uff-8'))
docs = Corpus(DirSource("./final/en_US", encoding = 'utf-8'))
as.character(docs[[1]])[1:3]
rm(docs)
docs = Corpus(DirSource("./final/en_US", encoding = 'UTF-8'))
as.character(docs[[1]])[1:5]
as.character(docs[[2]])[1:5]
as.character(docs[[3]])[1:10]
toSpace = content_transformer(function(x, pattern) { return (gsub(pattern, ' ', x))})
docs = tm_map(docs, toSpace, ':')
docs = tm_map(docs, toSpace, '-')
as.character(docs[[3]])[1:10]
docs = tm_map(docs, removePunctuation)
docs = tm_map(docs, content_transformer(tolower))
as.character(docs[[3]])[1:10]
docs = tm_map(docs, removeNumbers)
as.character(docs[[3]])[1:10]
rm(docs)
docs = Corpus(DirSource("./final/en_US", encoding = 'UTF-8'))
library(tm)
library(ggplot2)
docs = Corpus(DirSource("./final/en_US", encoding = 'UTF-8'))
toSpace = content_transformer(function(x, pattern) { return (gsub(pattern, ' ', x))})
docs = tm_map(docs, toSpace, ':')
docs = tm_map(docs, toSpace, '-')
docs = tm_map(docs, toSpace, '?')
docs = tm_map(docs, toSpace, '.')
docs = tm_map(docs, toSpace, ';')
docs = tm_map(docs, toSpace, ')')
docs = tm_map(docs, toSpace, '(')
blog = readLines('./final/en_US/en_US.blogs.txt')
dim(blog)
length(blog)
str(blog)
summary(blog)
blog[1:2]
blog = readLines('./final/en_US/en_US.blogs.txt', encoding='UTF-8')
blog[1:2]
blog[1:20]
str(blog)
blog = sample(blog, 9000)
str(blog)
blog = readLines('./final/en_US/en_US.blogs.txt', encoding = 'UTF-8')
set.seed(465)
blog <- smaple(blog, 9000)
blog <- sample(blog, 9000)
library(tm)
library(ggplot2)
docs <- Corpus(VectorSource(blog))
news = readLines('./final/en_US/en_US.news.txt', encoding = 'UTF-8')
length(news)
tail(news)
news[77256:77259]
news[1:10]
round(5/3)
length(news)*.1
round(length(news)*.1)
length(blog)
class(docs)
library(tm)
library(ggplot2)
blog = readLines('./final/en_US/en_US.blogs.txt', encoding = 'UTF-8')
set.seed(465)
blog <- sample(blog, round(length(blog)/100))
docs_blog <- Corpus(VectorSource(blog))
# remove \"
dblogs = tm_map(docs_blog, gsub, pattern="\\\"", replacement = " ")
# remove some special character and puctuation
#dblogs = tm_map(dblogs, gsub, pattern ="[\\?\\.\\*!]", replacement = " ")
# remove *, %, :, ;, (, ), =, #, ~, /, - and numbers
dblogs = tm_map(dblogs, gsub, pattern ="[\\*%0-9:;\\)\\(=#~/\\-]", replacement = " ")
dblogs[[1]]
dblogs[[1:20]]
dblogs[1]
dblogs[2]
dblogs[1][1:20]
length(dblogs)
rm(docs)
writeLines(dblogs[1:20])
writeLines(dblogs[[1:20]])
blog
